# Import Required Libraries
import pandas as pd
import numpy as np
import re
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report

# Load Data
fake_news = pd.read_csv('Fake.csv')
true_news = pd.read_csv('True.csv')

# Label Data and Combine
fake_news['isTrue'] = 0
true_news['isTrue'] = 1
df = pd.concat([fake_news, true_news], axis=0).reset_index(drop=True)
df = df.drop(['title', 'subject', 'date'], axis=1, errors='ignore')

# Preprocess Text
def preprocess_text(text):
    text = str(text).lower()
    text = re.sub(r'\[.*?\]', '', text)
    text = re.sub(r'http\S+|www.\S+', '', text)
    text = re.sub(r'<.*?>+', '', text)
    text = re.sub(r'[^a-z\s]', '', text)
    text = re.sub(r'\n', '', text)
    text = re.sub(r'\w*\d\w*', '', text)
    return text

df['text'] = df['text'].apply(preprocess_text)

# Prepare Data
X = df['text']
y = df['isTrue']

# Split Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Vectorize Text
vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Train Model
model = LogisticRegression()
model.fit(X_train_vec, y_train)

# Evaluate Model
y_pred = model.predict(X_test_vec)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Prediction Function
def predict_news(news_text):
    processed = preprocess_text(news_text)
    vect = vectorizer.transform([processed])
    pred = model.predict(vect)
    return "Real" if pred[0] == 1 else "Fake"

# Example
print(predict_news("Scientists discover coffee that can cure cancer!"))
